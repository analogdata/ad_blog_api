"""initial migrations v1

Revision ID: 9f98f6bc42ff
Revises: 
Create Date: 2025-09-09 01:24:21.841733

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
import pgvector.sqlalchemy.vector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9f98f6bc42ff'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authors',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('profile_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('website', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('social_media', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_authors_name'), 'authors', ['name'], unique=True)
    op.create_index(op.f('ix_authors_slug'), 'authors', ['slug'], unique=True)
    op.create_table('categories',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category_icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('category_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_categories_name'), 'categories', ['name'], unique=True)
    op.create_index(op.f('ix_categories_slug'), 'categories', ['slug'], unique=True)
    op.create_table('subscribers',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('subscribed_at', sa.DateTime(), nullable=False),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('unsubscribed_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscribers_email'), 'subscribers', ['email'], unique=True)
    op.create_table('tags',
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tag_icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tag_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tags_name'), 'tags', ['name'], unique=True)
    op.create_index(op.f('ix_tags_slug'), 'tags', ['slug'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'AUTHOR', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('profile_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('articles',
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.Column('updated_by_id', sa.Integer(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('summary', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('featured_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('header_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'PUBLISHED', 'SCHEDULED', name='status'), nullable=False),
    sa.Column('is_featured', sa.Boolean(), nullable=False),
    sa.Column('seo_title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('seo_description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('seo_keywords', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('seo_image', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('canonical_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('views', sa.Integer(), nullable=False),
    sa.Column('likes', sa.Integer(), nullable=False),
    sa.Column('read_time', sa.Integer(), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(), nullable=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True),
    sa.CheckConstraint('likes >= 0', name='ck_articles_likes_nonneg'),
    sa.CheckConstraint('views >= 0', name='ck_articles_views_nonneg'),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug', name='uq_articles_slug')
    )
    op.create_index('ix_articles_author_status', 'articles', ['author_id', 'status'], unique=False)
    op.create_index('ix_articles_category_status', 'articles', ['category_id', 'status'], unique=False)
    op.create_index('ix_articles_embedding_vector_idx', 'articles', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.create_index('ix_articles_featured', 'articles', ['is_featured'], unique=False)
    op.create_index(op.f('ix_articles_is_deleted'), 'articles', ['is_deleted'], unique=False)
    op.create_index('ix_articles_published_at', 'articles', ['published_at'], unique=False)
    op.create_index('ix_articles_search_vector', 'articles', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('ix_articles_status_published_at', 'articles', ['status', 'published_at'], unique=False)
    op.create_index('ix_articles_summary_trgm', 'articles', ['summary'], unique=False, postgresql_using='gin', postgresql_ops={'summary': 'gin_trgm_ops'})
    op.create_index(op.f('ix_articles_title'), 'articles', ['title'], unique=False)
    op.create_index('ix_articles_title_lower', 'articles', [sa.literal_column('lower(title)')], unique=False)
    op.create_index('ix_articles_title_trgm', 'articles', ['title'], unique=False, postgresql_using='gin', postgresql_ops={'title': 'gin_trgm_ops'})
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Enum('CREATE_ARTICLE', 'EDIT_OWN_ARTICLE', 'EDIT_ANY_ARTICLE', 'DELETE_OWN_ARTICLE', 'DELETE_ANY_ARTICLE', 'PUBLISH_ARTICLE', 'SCHEDULE_ARTICLE', 'FEATURE_ARTICLE', 'CREATE_USER', 'EDIT_OWN_PROFILE', 'EDIT_ANY_PROFILE', 'DELETE_USER', 'MANAGE_CATEGORIES', 'MANAGE_TAGS', 'VIEW_OWN_ANALYTICS', 'VIEW_ALL_ANALYTICS', name='permissionname'), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=False)
    op.create_table('article_tags',
    sa.Column('article_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.PrimaryKeyConstraint('article_id', 'tag_id')
    )
    op.create_table('article_versions',
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.Column('updated_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('article_id', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('summary', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('change_comment', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['article_id'], ['articles.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_article_versions_article_id'), 'article_versions', ['article_id'], unique=False)
    op.create_index(op.f('ix_article_versions_version_number'), 'article_versions', ['version_number'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_article_versions_version_number'), table_name='article_versions')
    op.drop_index(op.f('ix_article_versions_article_id'), table_name='article_versions')
    op.drop_table('article_versions')
    op.drop_table('article_tags')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('ix_articles_title_trgm', table_name='articles', postgresql_using='gin', postgresql_ops={'title': 'gin_trgm_ops'})
    op.drop_index('ix_articles_title_lower', table_name='articles')
    op.drop_index(op.f('ix_articles_title'), table_name='articles')
    op.drop_index('ix_articles_summary_trgm', table_name='articles', postgresql_using='gin', postgresql_ops={'summary': 'gin_trgm_ops'})
    op.drop_index('ix_articles_status_published_at', table_name='articles')
    op.drop_index('ix_articles_search_vector', table_name='articles', postgresql_using='gin')
    op.drop_index('ix_articles_published_at', table_name='articles')
    op.drop_index(op.f('ix_articles_is_deleted'), table_name='articles')
    op.drop_index('ix_articles_featured', table_name='articles')
    op.drop_index('ix_articles_embedding_vector_idx', table_name='articles', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'}, postgresql_with={'lists': 100})
    op.drop_index('ix_articles_category_status', table_name='articles')
    op.drop_index('ix_articles_author_status', table_name='articles')
    op.drop_table('articles')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tags_slug'), table_name='tags')
    op.drop_index(op.f('ix_tags_name'), table_name='tags')
    op.drop_table('tags')
    op.drop_index(op.f('ix_subscribers_email'), table_name='subscribers')
    op.drop_table('subscribers')
    op.drop_index(op.f('ix_categories_slug'), table_name='categories')
    op.drop_index(op.f('ix_categories_name'), table_name='categories')
    op.drop_table('categories')
    op.drop_index(op.f('ix_authors_slug'), table_name='authors')
    op.drop_index(op.f('ix_authors_name'), table_name='authors')
    op.drop_table('authors')
    # ### end Alembic commands ###
